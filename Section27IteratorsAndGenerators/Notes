

Iterator - an object that can be iterated upon. An object which returns data, one element at a time when nexT() is called on it

Iterable - an Object which return an Iterator when iter() is called on it.

For something to be iterable, it has to respond to __iter__, and return an iterable

Example:

    "HELLO" is an iterable, but not an iterator
    iter("HELLO") returns an iterator



Generators
    Generators are iterators, but not every iterators are generators
    Generators can be created with generator functions
    generators function use the yield keyword
    generators can be created with generator expressions


Functions vs Generator Functions

Functions
USES return
returns once
when invoked, returns the return value

Generator Functions
USES yield
can yield multiple times
when invoked, returns a generator

def count_up_to(max):
    count = 1
    while count <= max:
    yield count
    count += 1